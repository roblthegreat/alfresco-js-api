{{>licenseInfo}}
{{#imports}}
import { {{classname}} } from '../{{filename}}';
{{/imports}}
import { BaseApi } from './base.api';

{{#operations}}/**
* {{baseName}} service.
* @module {{#invokerPackage}}{{&invokerPackage}}/{{/invokerPackage}}{{#apiPackage}}{{&apiPackage}}/{{/apiPackage}}{{classname}}
*/
export class {{classname}} extends BaseApi {
    {{#operation}}
    /**{{#summary}}
    * {{&summary}}{{/summary}}{{#description}}
    * {{&description}}{{/description}}{{#notes}}
    * {{&notes}}{{/notes}}
    * {{#allParams}}{{#required}}
    * @param{{&vendorExtensions.x-jsdoc-type}} {{paramName}} {{&description}}{{/required}}{{/allParams}}{{#hasOptionalParams}}
    * @param opts Optional parameters{{#allParams}}{{^required}}
    * @param{{&vendorExtensions.x-jsdoc-type}} opts.{{paramName}} {{&description}}{{#defaultValue}} (default to {{.}}){{/defaultValue}}{{/required}}{{/allParams}}{{/hasOptionalParams}}
    * @return Promise<{{#returnType}}{{&returnType}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}{}{{/returnType}}>
    */
    {{nickname}}({{&vendorExtensions.x-codegen-argList}}): Promise<{{#returnType}}{{&returnType}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}{{#canReturnError}} | {{&canReturnError}}{{/canReturnError}}> {{>openBracket}}{{#hasOptionalParams}}
        opts = opts || {};
        {{/hasOptionalParams}}{{#bodyParam}}
        const postBody = {{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}};{{/bodyParam}}{{#allParams}}{{#required}}
        if ({{paramName}} === undefined || {{paramName}} === null) {
            throw new Error("Required param '{{paramName}}' in {{operationId}}");
        }{{/required}}{{/allParams}}{{#pathParams}}
        const pathParams = {
            '{{baseName}}': {{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}{{#hasMore}},{{/hasMore}}
        };{{/pathParams}}{{#queryParams}}
        const queryParams = {
            '{{baseName}}': {{#collectionFormat}}this.apiClient.buildCollectionParam({{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}, '{{collectionFormat}}'){{/collectionFormat}}{{^collectionFormat}}{{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}{{/collectionFormat}}{{#hasMore}},{{/hasMore}}
        };{{/queryParams}}{{#headerParams}}
        const headerParams = {
            '{{baseName}}': {{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}{{#hasMore}},{{/hasMore}}
        };{{/headerParams}}{{#formParams}}
        const formParams = {
            '{{baseName}}': {{#collectionFormat}}this.apiClient.buildCollectionParam({{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}, '{{collectionFormat}}'){{/collectionFormat}}{{^collectionFormat}}{{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}{{/collectionFormat}}{{#hasMore}},{{/hasMore}}
        };{{/formParams}}
        const contentTypes = [{{#consumes}}'{{& mediaType}}'{{#hasMore}}, {{/hasMore}}{{/consumes}}];
        const accepts = [{{#produces}}'{{& mediaType}}'{{#hasMore}}, {{/hasMore}}{{/produces}}];

        return this.apiClient.callApi(
            '{{&path}}',
            '{{httpMethod}}',
            {{#pathParams}}pathParams{{/pathParams}}{{^pathParams}}null{{/pathParams}},
            {{#queryParams}}queryParams{{/queryParams}}{{^queryParams}}null{{/queryParams}},
            {{#headerParams}}headerParams{{/headerParams}}{{^headerParams}}null{{/headerParams}},
            {{#formParams}}formParams{{/formParams}}{{^formParams}}null{{/formParams}},
            {{#bodyParam}}postBody{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}},
            contentTypes,
            accepts{{#returnType}},
            {{&returnType}}{{/returnType}}
        );
    }
{{/operation}}

}
{{/operations}}
